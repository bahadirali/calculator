{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","_this","Object","_home_bahadir_react_workspace_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_bahadir_react_workspace_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_bahadir_react_workspace_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","screenText","handleButtonInput","bind","_home_bahadir_react_workspace_calculator_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","clearScreen","event","input","currentScreenText","length","setState","substring","eval","toString","e","SyntaxError","console","log","message","keyboard","_this2","rows","buttonSymbols","push","react__WEBPACK_IMPORTED_MODULE_6___default","key","colSpan","className","onClick","_loop","i","cells","_loop2","j","cellPadding","cellSpacing","border","React","Component"],"mappings":"iOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,q2CE9HER,+BACnB,SAAAA,IAAYS,GAAM,IAAAC,EAAA,OAAAC,OAAAC,4HAAA,EAAAD,CAAAE,KAAAb,MAChBU,EAAAC,OAAAG,uIAAA,EAAAH,CAAAE,KAAAF,OAAAI,4HAAA,EAAAJ,CAAAX,KAAAgB,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,WAAY,IAGdR,EAAKS,kBAAoBT,EAAKS,kBAAkBC,KAAvBT,OAAAU,mIAAA,EAAAV,CAAAD,IACzBA,EAAKY,YAAcZ,EAAKY,YAAYF,KAAjBT,OAAAU,mIAAA,EAAAV,CAAAD,IARHA,iWAYAa,MAAOC,OACvB,IAAMC,kBAAoBZ,KAAKI,MAAMC,WACrC,GAAa,MAAVM,MACEC,kBAAkBC,OAAS,GAC5Bb,KAAKc,SAAS,CACZT,WAAYO,kBAAkBG,UAAU,EAAGH,kBAAkBC,OAAO,UAGpE,GAAa,MAAVF,MACP,IACKC,kBAAkBC,OAAS,GAC5Bb,KAAKc,SAAS,CACZT,WAAYW,KAAKJ,mBAAmBK,aAGxC,MAAOC,GACDA,aAAaC,aACfC,QAAQC,IAAIH,EAAEI,aAMR,KAATX,QAAcA,MAAQ,KACzBX,KAAKc,SAAS,CACZT,WAAaO,kBAAoBD,4CAK3BD,GACVV,KAAKc,SAAS,CACZT,WAAY,sCAKR,IAEFkB,EAFEC,EAAAxB,KAGFyB,EAAO,GACLC,EAAgB,CACE,CAAC,IAAI,IAAI,IAAI,KACb,CAAC,IAAI,IAAI,IAAI,KACb,CAAC,IAAI,IAAI,IAAI,KACb,CAAC,IAAI,IAAI,IAAI,MAGrCD,EAAKE,KACHC,2CAAA3C,EAAAC,cAAA,MAAI2C,IAAI,aACND,2CAAA3C,EAAAC,cAAA,MAAI4C,QAAQ,KACVF,2CAAA3C,EAAAC,cAAA,UAAQ6C,UAAU,eAAeC,QAAShC,KAAKS,aAA/C,YAON,IArBM,IAAAwB,EAAA,SAqBEC,GAEN,IADA,IAAIC,EAAQ,GAtBRC,EAAA,SAuBIC,GACNF,EAAMR,KAAKC,2CAAA3C,EAAAC,cAAA,MAAI2C,IAAS,EAAJK,EAAQG,GAC1BT,2CAAA3C,EAAAC,cAAA,UACE6C,UAAU,cACVC,QAAS,SAACd,GAAOM,EAAKlB,kBAAkBY,EAAGQ,EAAcQ,GAAGG,MACzDX,EAAcQ,GAAGG,OALlBA,EAAE,EAAGA,EAAE,EAAGA,IAAID,EAAdC,GAURZ,EAAKE,KACHC,2CAAA3C,EAAAC,cAAA,MAAI2C,IAAK,OAAQK,GACdC,KAdCD,EAAE,EAAGA,EAAE,EAAGA,IAAID,EAAdC,GA0BR,OAFDX,EAAWE,EAGRG,2CAAA3C,EAAAC,cAAA,OAAK6C,UAAU,OACbH,2CAAA3C,EAAAC,cAAA,SACEoD,YAAY,IACZC,YAAY,IACZC,OAAO,IACPT,UAAU,cACVH,2CAAA3C,EAAAC,cAAA,aACE0C,2CAAA3C,EAAAC,cAAA,UACE0C,2CAAA3C,EAAAC,cAAA,MAAI4C,QAAQ,KACVF,2CAAA3C,EAAAC,cAAA,OAAK6C,UAAU,oBACbH,2CAAA3C,EAAAC,cAAA,OAAK6C,UAAU,oBACc,KAA1B/B,KAAKI,MAAMC,WAAoB,IAAML,KAAKI,MAAMC,eAKxDkB,cAlHoBkB,6CAAMC","file":"static/js/main.5ce1167c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint no-eval: 0 */\n\nimport React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      screenText: '',\n    };\n\n    this.handleButtonInput = this.handleButtonInput.bind(this);\n    this.clearScreen = this.clearScreen.bind(this);\n  }\n\n\n  handleButtonInput(event, input){\n    const currentScreenText = this.state.screenText;\n    if(input === 'c'){\n      if(currentScreenText.length > 0){\n        this.setState({\n          screenText: currentScreenText.substring(0, currentScreenText.length-1),\n        });\n      }\n    }else if(input === '='){\n      try {\n        if(currentScreenText.length > 0){\n          this.setState({\n            screenText: eval(currentScreenText).toString(),\n          });\n        } \n      } catch (e) {\n          if (e instanceof SyntaxError) {\n            console.log(e.message);  \n            //alert(e.message);\n          }\n      }\n    }\n    else{\n      if(input == 'x') input = '*';\n      this.setState({\n        screenText:  currentScreenText + input,\n      });\n    }\n  }\n\n  clearScreen(event){\n    this.setState({\n      screenText: '',\n    });\n\n  }\n\n  render(){\n\n    let keyboard = [];\n    let rows = [];\n    const buttonSymbols = [\n                            ['7','8','9','-'],\n                            ['4','5','6','+'],\n                            ['1','2','3','x'],\n                            ['0','c','=','/'],\n                          ];\n\n    rows.push(\n      <tr key=\"first_row\">\n        <td colSpan=\"4\">\n          <button className=\"clear-button\" onClick={this.clearScreen}>\n            clear\n          </button>\n        </td>\n      </tr>\n    );\n\n    for(let i=0; i<4; i++){\n      let cells = [];\n      for(let j=0; j<4; j++){\n        cells.push(<td key={i * 4 + j} >\n          <button\n            className=\"calc-button\"\n            onClick={(e) => {this.handleButtonInput(e, buttonSymbols[i][j])}}>\n              {buttonSymbols[i][j]}\n          </button>\n        </td>);\n      }\n      \n      rows.push(\n        <tr key={\"row_\"+ i}>\n          {cells}\n        </tr>\n      );\n    }\n\n    /*\n    keyboard.push(\n        {rows}\n    );\n    */\n   keyboard = rows;\n\n    return (\n      <div className=\"App\">\n        <table \n          cellPadding=\"0\"\n          cellSpacing=\"0\"\n          border=\"0\"\n          className=\"calc-table\">\n          <tbody>\n            <tr>\n              <td colSpan=\"4\">\n                <div className=\"screen-outer-div\">\n                  <div className=\"screen-inner-div\">\n                    {this.state.screenText === '' ? '0' : this.state.screenText}\n                  </div>\n                </div>\n              </td>\n            </tr>\n            {keyboard}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}